let fs,axios,path,fileURLToPath;_613‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_613‍.w("axios",[["default",["axios"],function(v){axios=v}]]);_613‍.w("path",[["default",["path"],function(v){path=v}]]);_613‍.w("url",[["fileURLToPath",["fileURLToPath"],function(v){fileURLToPath=v}]]);




// Workaround to handle __dirname in ES modules
const __filename = fileURLToPath(_613‍._.meta.url);
const __dirname = path.dirname(__filename);

// Load language files dynamically
const loadLanguageFile = async (lang) => {
    const module = await _613‍.i(`./${lang}.ts`);
    return module;
};

// Save new language file
const saveUpdatedFile = (lang, updatedContent) => {
    const filePath = path.join(__dirname, `${lang}-updated.ts`);
    fs.writeFileSync(filePath, `export const ${lang} = ${JSON.stringify(updatedContent, null, 2)};`);
    console.log(`Updated file saved as ${lang}-updated.ts`);
};

// DeepL Translation function
const translateText = async (text, targetLang, deeplApiKey) => {
    const response = await axios({
        method: 'post',
        url: 'https://api-free.deepl.com/v2/translate',
        params: {
            auth_key: deeplApiKey,
            text: text,
            target_lang: targetLang.toUpperCase(),
        }
    });
    return response.data.translations[0].text;
};

// Compare translations and translate missing keys
const findMissingTranslations = async (enData, targetData, targetLang, deeplApiKey) => {
    const updatedData = { ...targetData };

    const recursiveCheck = async (source, target) => {
        for (const key in source) {
            if (typeof source[key] === 'object') {
                if (!target[key]) target[key] = {};
                await recursiveCheck(source[key], target[key]);
            } else {
                if (!target[key] || target[key] === source[key]) {
                    console.log(`Translating key: ${key}`);
                    const translatedText = await translateText(source[key], targetLang, deeplApiKey);
                    target[key] = translatedText;
                }
            }
        }
    };

    await recursiveCheck(enData, updatedData);
    return updatedData;
};

// Main function
const translateMissingKeys = async (targetLang) => {
    const deeplApiKey = '7bed9015-14cf-40c8-a02d-675a053b090e';  // Replace with your Deepl API key

    // Load the English and target language files
    const enModule = await loadLanguageFile('en');
    const targetModule = await loadLanguageFile(targetLang);
    const enData = enModule.en;
    const targetData = targetModule[targetLang];

    // Find missing translations and translate them
    const updatedData = await findMissingTranslations(enData, targetData, targetLang, deeplApiKey);

    // Save the updated target language file
    saveUpdatedFile(targetLang, updatedData);
};

// Run the script with a given language
const args = process.argv.slice(2);
if (args.length === 0) {
    console.error('Please provide a target language code, e.g., node translate.js de');
    process.exit(1);
}

const targetLang = args[0];
translateMissingKeys(targetLang);
